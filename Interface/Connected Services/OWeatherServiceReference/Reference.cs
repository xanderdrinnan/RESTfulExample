//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Interface.OWeatherServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WeatherReport", Namespace="http://schemas.datacontract.org/2004/07/RESTfulExample")]
    [System.SerializableAttribute()]
    public partial class WeatherReport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TempMaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TempMinField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TempMax {
            get {
                return this.TempMaxField;
            }
            set {
                if ((object.ReferenceEquals(this.TempMaxField, value) != true)) {
                    this.TempMaxField = value;
                    this.RaisePropertyChanged("TempMax");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TempMin {
            get {
                return this.TempMinField;
            }
            set {
                if ((object.ReferenceEquals(this.TempMinField, value) != true)) {
                    this.TempMinField = value;
                    this.RaisePropertyChanged("TempMin");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OWeatherServiceReference.IOpenWeatherService")]
    public interface IOpenWeatherService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpenWeatherService/WeatherReturn", ReplyAction="http://tempuri.org/IOpenWeatherService/WeatherReturnResponse")]
        Interface.OWeatherServiceReference.WeatherReport WeatherReturn(string cityFromGAPI, string countryFromGAPI);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOpenWeatherService/WeatherReturn", ReplyAction="http://tempuri.org/IOpenWeatherService/WeatherReturnResponse")]
        System.Threading.Tasks.Task<Interface.OWeatherServiceReference.WeatherReport> WeatherReturnAsync(string cityFromGAPI, string countryFromGAPI);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOpenWeatherServiceChannel : Interface.OWeatherServiceReference.IOpenWeatherService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OpenWeatherServiceClient : System.ServiceModel.ClientBase<Interface.OWeatherServiceReference.IOpenWeatherService>, Interface.OWeatherServiceReference.IOpenWeatherService {
        
        public OpenWeatherServiceClient() {
        }
        
        public OpenWeatherServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OpenWeatherServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OpenWeatherServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OpenWeatherServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Interface.OWeatherServiceReference.WeatherReport WeatherReturn(string cityFromGAPI, string countryFromGAPI) {
            return base.Channel.WeatherReturn(cityFromGAPI, countryFromGAPI);
        }
        
        public System.Threading.Tasks.Task<Interface.OWeatherServiceReference.WeatherReport> WeatherReturnAsync(string cityFromGAPI, string countryFromGAPI) {
            return base.Channel.WeatherReturnAsync(cityFromGAPI, countryFromGAPI);
        }
    }
}
